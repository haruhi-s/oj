(ql:quickload "graph")

(use-package :graph)

(defun parse (filename)
  (iter (for line in (uiop:read-file-lines filename))
    (with g = (make-hash-table))
    (binds (((first rest) (str:split ": " line)))
      (iter (for r in (str:split " " rest))
        (setf (gethash (intern first) (ensure-gethash (intern r) g (make-hash-table))) t)
        (setf (gethash (intern r) (ensure-gethash (intern first) g (make-hash-table))) t)))
    (finally (return g))))

(defun max-connected (cut)
  (iter (for (b v) in-hashtable cut)
    (finding b maximizing (hash-table-count v))))

(defun solve (g)
  (binds (((AA . B) (hash-table-keys g))
          (size (hash-table-count g))
          (A (alist-hash-table (mapcar (rcurry #'cons t) (list AA))))
          (B (alist-hash-table (mapcar (rcurry #'cons t) B)))
          (cut (make-hash-table))
          ( addedge (i j cut) (incf (gethash i (ensure-gethash j cut (make-hash-table)) 0)))
          ( remedge (i j cut) (remhash i (gethash j cut)))
          ( cutvalue (cut) (iter (for (_ h) in-hashtable cut) (sum (hash-table-count h))))
          ( add (node)
            (remhash node B)
            (ensure-gethash node A t)
            (remhash node cut)
            (iter (for (i _) in-hashtable (gethash node g))
              (when (gethash i B)
                (addedge node i cut)))))
    (iter (for (nei _) in-hashtable (gethash AA g))
      (addedge AA nei cut))
    (iter
      (for i from 1)
      (while (< 1 (hash-table-count B)))
      (for node = (max-connected cut))
      (add node)
      (for v = (cutvalue cut))
      ( finding (list (* i (- size i)) v)
        minimizing v))))

;; (solve (parse "aoc2023/day25.in"))
